@page "/segmento"

<PageTitle>Segmentos</PageTitle>

@namespace MyApplication.Component
@inject SegmentService SegmentService;
@inject IDialogService DialogService;
@using MyApplication.Model;

@* <MudButton @onclick="OpenDialog">OpenDialog</MudButton> *@
<MudTable Items="@segmentoList.Take(@index)" Dense="true" Hover="true" 
                Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Class="mt-2" Typo="Typo.h6">Segmentos</MudText>
        <MudSpacer />
        <MudIconButton Class="mt-4" Icon="@Icons.Material.Filled.AddCircleOutline" aria-label="adicionar"
                                OnClick="ViewItemCreate" Size="Size.Medium" Color="Color.Dark"></MudIconButton>
        <MudTextField Class="mt-0" @bind-Value="searchString"
                Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                        IconSize="Size.Medium" Placeholder="Procurar"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nome</MudTh>
        <MudTh>Descrição</MudTh>
        <MudTh Style="text-align:end;">Ações</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nome">@context.Nome</MudTd>
        <MudTd DataLabel="Site">@context.Descrição</MudTd>
        <MudTd DataLabel="Ações">
            <div class="d-flex flex-row-reverse">
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" 
                                    @onclick="@(() => ViewItemRemove(@context._id))" Color="Color.Dark" aria-label="delete"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Dark" 
                                    @onclick="@(() => ViewItemEdited(@context._id))" aria-label="alterar"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Dark" 
                                    @onclick="@(() => ViewItemCall(@context._id))" aria-label="olho"></MudIconButton>
            </div>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 15, 25, 30, 50 }" @onchange="ChangeCollectionItens" @bind-value="index"
                InfoFormat="@($"Itens {infoFormat}")" HorizontalAlignment="HorizontalAlignment.End"  RowsPerPageString="Itens por página:" 
                        HidePageNumber="@hidePageNumber" HidePagination="@hidePagination" HideRowsPerPage="@hideRowsPerPage" />
    </PagerContent>
</MudTable>

@code
{
    public string searchString = "";
    public bool _loading = true;
    public bool hidePageNumber;
    public bool hidePagination;
    public bool hideRowsPerPage;
    public int index = 10;
    public Segment segment = new Segment();
    public List<Datum> segmentoList= new List<Datum>();
    public string infoFormat = "{first_item}-{last_item} de {all_items} itens";

    public void ChangeCollectionItens()
    {
        this.index = 15;
        StateHasChanged();
    }

    public async void ViewItemCall(Id idItemSegment)
    {
        string id = idItemSegment.oid.ToString();
        if(!String.IsNullOrEmpty(id))
        {
            var result = await SegmentService.ReturnItem(id);
            if(result != null)
            {
                OpenDialog(id, true, result);
            }
        }
    }

    public async void ViewItemEdited(Id idItemSegment)
    {
        string id = idItemSegment.oid.ToString();
        if(!String.IsNullOrEmpty(id))
        {
            var result = await SegmentService.ReturnItem(id);
            if(result != null)
            {
                OpenDialog(id, false, result);
            }
        }
    }

    public async void ViewItemRemove(Id idItemSegment)
    {
        string id = idItemSegment.oid.ToString();
        if(!String.IsNullOrEmpty(id))
        {
            DeleteDialog(id);
        }
    }

    public async void ViewItemCreate()
    {
        string createdUser = "dpfs@cin.ufpe.br";
        var parameters = new DialogParameters();
        parameters.Add("CreatedUser", createdUser);

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true, CloseOnEscapeKey = true };
        var dialog = DialogService.Show<CreateItem>("Simple Dialog", parameters, options);
    }

    private void OpenDialog(string idItem, bool readOnly, ItemSegment itemSegment)
    {
        var parameters = new DialogParameters();
        parameters.Add("idItem", idItem);
        parameters.Add("ReadOnly", readOnly);
        parameters.Add("ItemSegment", itemSegment);

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true, CloseOnEscapeKey = true };
        var dialog = DialogService.Show<Viewitem>("Simple Dialog", parameters, options);
    }

    private void DeleteDialog(string idItem)
    {
        var parameters = new DialogParameters();
        parameters.Add("idItem", idItem);
        var options = new DialogOptions { DisableBackdropClick = true, CloseOnEscapeKey = true };

        DialogService.Show<RemoverItem>("Delete Dialog", parameters, options);
    }

    protected override async Task OnInitializedAsync()
    {
        ReloadItens();
    }

    private async void ReloadItens()
    {
        //Open loading effect for users
        _loading = true;
        StateHasChanged();

        segment = await SegmentService.RetornarRota();
        segmentoList = segment.data;

        //Close loading effect for users
        _loading = false;
        StateHasChanged();
    }
}